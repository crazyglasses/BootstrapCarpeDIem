{"id":"index.html","dependencies":[{"name":"./index.js","dynamic":true,"resolved":"/Users/anmolkulkarni/Develop/Hackathons/BootstrapParadox/bodypix/body-pix/app/index.js","parent":"/Users/anmolkulkarni/Develop/Hackathons/BootstrapParadox/bodypix/body-pix/app/index.html"},{"name":"/Users/anmolkulkarni/Develop/Hackathons/BootstrapParadox/bodypix/body-pix/app/.babelrc","includedInParent":true,"mtime":1564818995001},{"name":"/Users/anmolkulkarni/Develop/Hackathons/BootstrapParadox/bodypix/body-pix/app/package.json","includedInParent":true,"mtime":1564818995002}],"generated":{"html":"<!DOCTYPE html>\n<html>\n\n<head>\n    <title>BodyPix - With a Webcam Demo</title>\n    <style>body {\n      margin: 0;\n      width: 100%;\n    }\n\n    .footer {\n      position: fixed;\n      left: 0;\n      bottom: 0;\n      width: 100%;\n      color: black;\n    }\n\n    .footer-text {\n        max-width: 600px;\n        text-align: center;\n        margin: auto;\n    }\n\n    .footer-text, #colors {\n      font-family: Arial, Helvetica, sans-serif;\n    }\n\n    #colors {\n      margin: 0;\n      padding: 0;\n      list-style: none;\n    }\n\n    #colors li {\n      margin: 0;\n    }\n\n    #colors .color {\n      width: 50px;\n      height: 1em;\n    }\n\n    #colors li div {\n      display: inline-block;\n    }\n\n    .footer-menu {\n      display: none;\n    }\n\n    #output {\n      \n      width: 50%;\n      height: 50%;\n    }\n\n    /* mobile */\n    @media only screen and (max-width: 850px) {\n      .footer {\n        height: 46px;\n      }\n      .footer-text {\n        display: none;\n      }\n\n      #main {\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n      }\n    }</style>\n   <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n   <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta charset=\"UTF-8\">\n</head>\n\n\n<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js\"></script>\n<script>console.log(\"1\");\nvar stream;\n\nfunction runStreaming() {\n  console.log(\"2\");\n  var canvas = document.getElementById(\"output\");\n  stream = canvas.captureStream(24);\n  var von = document.getElementById(\"outputVideoNew\");\n  von.srcObject = stream;\n  console.log(stream);\n}\n\nfunction updateOutputOrig() {\n  var cn = document.getElementById(\"output\");\n  var ctx = cn.getContext('2d');\n  var cn2 = document.getElementById(\"outputOrig\");\n  var ctx2 = cn2.getContext('2d');\n  var imgd = ctx.getImageData(0, 0, cn.width, cn.height);\n  var pix = imgd.data;\n\n  for (var i = 0, n = pix.length; i < n; i += 4) {\n    var r = pix[i],\n        g = pix[i + 1],\n        b = pix[i + 2];\n\n    if (r == 0 && g == 0 && b == 0) {\n      // If the green component value is higher than 150\n      // make the pixel transparent because i+3 is the alpha component\n      // values 0-255 work, 255 is solid\n      pix[i + 3] = 0;\n    }\n  }\n\n  ctx2.putImageData(imgd, 0, 0, 0, 0, cn.width, cn.height);\n}</script>\n\n<body>\n    <div id=\"stats\"></div>\n    <div id=\"info\" style=\"display:none\">\n    </div>\n    <div id=\"loading\">\n        Loading the model...\n    </div>\n\n    <div id=\"main\" style=\"display:none\">\n        <video id=\"video\" playsinline=\"\" style=\" -moz-transform: scaleX(-1);\n        -o-transform: scaleX(-1);\n        -webkit-transform: scaleX(-1);\n        transform: scaleX(-1);\n        display: none;\n        \">\n        </video>\n        <canvas id=\"output\">\n    </canvas></div>\n    <ul id=\"colors\" style=\"display: none\"></ul>\n    <div class=\"footer\">\n        <div class=\"footer-text\">\n            <p>\n              The BodyPix model can estimate which pixels in an image are part of a person, and which pixels\n              are part of each of 24 body parts.  It works on a single person, and such <strong>works best</strong> when <strong>one person is present</strong> in an image.\n                <br>\n                <br> The <strong>output stride</strong> and <strong>model (indicated by mobileNetArchitecture)</strong> have the largest effects on accuracy/speed. A <i>higher</i> output stride results in lower accuracy but higher speed. A <i>larger</i> model, indicated by the <i>mobileNetArchitecture</i> dropdown, results in higher accuracy but lower speed.\n            </p>\n        </div>\n\n        <div class=\"footer-menu\">\n          <i class=\"material-icons switch-camera\">switch_camera</i>\n          <i class=\"material-icons mask mode active\">portrait</i>\n          <i class=\"material-icons mode bokeh\">blur_on</i>\n          <i class=\"material-icons mode part-map\">format_color_fill</i>\n          <i class=\"material-icons high-accuracy\">high_quality</i>\n        </div>\n    </div>\n    <script src=\"/168726dbe96b3ce427e7fedce31bb0bc.js\"></script>\n    <script src=\"https://cdn.agora.io/sdk/web/AgoraRTCSDK-2.8.0.js\"></script>\n    <script>var client = AgoraRTC.createClient({\n  mode: 'live',\n  codec: \"h264\"\n});\nclient.init(\"f839e8811b0841b0beba0a7b1706bfa3\", function () {\n  console.log(\"AgoraRTC client initialized\");\n}, function (err) {\n  console.log(\"AgoraRTC client init failed\", err);\n});\nclient.join(\"006f839e8811b0841b0beba0a7b1706bfa3IACHbG1AFARNNn9Ws9CZW57GiqtZhqEhhRhKlFbJUyuaRliNuxMAAAAAEAAZzUhZJ5lHXQEAAQAnmUdd\", \"test2\", null, function (uid) {\n  console.log(\"User \" + uid + \" join channel successfully\");\n  localStream = AgoraRTC.createStream({\n    streamID: null,\n    audio: true,\n    video: true,\n    screen: false\n  });\n  localStream.init(function () {\n    console.log(\"getUserMedia successfully\");\n    localStream.play('agora_local');\n  }, function (err) {\n    console.log(\"getUserMedia failed\", err);\n  });\n  client.publish(localStream, function (err) {\n    console.log(\"Publish local stream error: \" + err);\n  });\n  client.on('stream-published', function (evt) {\n    console.log(\"Publish local stream successfully\");\n  });\n}, function (err) {\n  console.log(\"Join channel failed\", err);\n});</script>\n</body>\n\n</html>\n"},"sourceMaps":null,"error":null,"hash":"67b46918c7438c69dc88d9ad8ba47e3c","cacheData":{"env":{}}}